body{
  margin: 0;
  max-width: 1440px;
  margin-left: auto;
  margin-right: auto;
}

h1 {
  font-weight: bold;
  text-align: center;
  margin: 4rem 0 2rem 0;
}

.socials.github{
  position: absolute;
  top: 0;
  right: 0;
  transform: translate(-50%, 50%);
}

.socials.twitter{
  position: absolute;
  top: 0;
  right: 0;
  transform: translate(-200%, 58%);
}

.loading {
  text-align: center;
}

#starting {
  text-align: center;
  font-size: 1.25rem;
}

#starting p:first-of-type{
  font-weight: bold;
  margin-bottom: 0;
}

#app {
  font-family: Avenir, Helvetica, Arial, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  text-align: center;
  color: #2c3e50;
  display: flex;
  justify-content: center;
}

#settings{
  display: flex;
  justify-content: space-evenly;
  position: relative;
}

#settings label {
  position: absolute;
  transform: translateY(100%);
  font-weight: bold;
}

#settings svg{
  width: 16px;
  height: 16px;
  cursor: pointer;
  stroke-width: 2;
  color: #007bff;
}

#settings svg:hover{
  border-bottom: 1px solid #007bff;
}

#settings select,
#settings input {
  margin: 3rem 0 2rem 0;
  padding: 1rem;
  line-height: normal;
  border-width: 1px;
  background-color: white;
  max-width: 8rem;
}


.commit-container {
  display: flex;
}

.box{
  width: 15px;
  height: 15px;
  border: 1px solid gray;
  margin: 2px;
}

pre {
  width: 50%;
  margin-left: auto;
  margin-right: auto;
  position: relative;
}

#copy {
  position: absolute;
  width: 30px;
  color: gray;
  top: 0;
  right: 0;
  transform: translate(-50%, 100%);
}

#copy:hover{
  background-color: lightgray;
  border-radius: 5px;
  cursor: pointer;
}

.hidden{
  display: none;
}

.banner {
  text-align: center;
  position: absolute;
  top: 0;
  right: 0;
}

#instructions {
  display: flex;
  flex-direction: column;
  align-items: center;
  max-width: 50%;
  margin-left: auto;
  margin-right: auto;
}

.instructions-title{
  margin-bottom: 1rem;
}

.instructions-body{
  position: relative;
}

.instructions-body li {
  margin-bottom: 0.5rem;
}

.instructions-body li span {
  font-weight: bold;
}

.instructions-body a.bob-link {
  text-decoration: underline;
}

.instructions-body a.bob-link:hover {
  text-decoration: none;
}

.instructions-body a.bob-link:hover::after {
  content: '';
  background-image: url("./duck.jpeg");
  background-size: cover;
  background-position: center;
  background-repeat: no-repeat;
  // display: block;
  // background-size: 100px auto;
  height: 150px;
  width: 120px;
  border-radius: 10px;
  position: absolute;
  top: -15%;
  left: 50%;
  transform: translate(-50%, -50%);
}

.instructions-body img.bob:nth-of-type(1) {
  --tranX: -100%;
  --tranY: -75%;
  --degreeBob: 15deg;
  --scaleBob: 0.4;
  position: absolute;
  top: 0;
  left: 0;
  animation: shake 0.5s;
  animation-iteration-count: infinite;
}

.instructions-body img.bob:nth-of-type(2) {
  --tranX: -110%;
  --tranY: 50%;
  --degreeBob: -15deg;
  --scaleBob: 0.6;
  position: absolute;
  top: 0;
  left: 0;
  animation: shake 1s;
  animation-iteration-count: infinite;
}

.instructions-body img.bob:nth-of-type(3) {
  --tranX: 100%;
  --tranY: -65%;
  --degreeBob: -15deg;
  --scaleBob: 0.5;
  position: absolute;
  top: 0;
  right: 0;
  animation: shake 1.25s;
  animation-iteration-count: infinite;
}

.instructions-body img.bob:nth-of-type(4) {
  --tranX: 100%;
  --tranY: 50%;
  --degreeBob: 15deg;
  --scaleBob: 0.7;
  position: absolute;
  top: 0;
  right: 0;
  animation: shake 1.5s;
  animation-iteration-count: infinite;
}

.instructions-body img.bob {
  animation: shake 0.5s;
  animation-iteration-count: infinite;
}

@keyframes shake {
  0% { transform: translate(calc(var(--tranX) + 1px), calc(var(--tranY) + 1px)) rotate(var(--degreeBob)) scale(var(--scaleBob)); }
  10% { transform: translate(calc(var(--tranX) + -1px), calc(var(--tranY) + -2px)) rotate(var(--degreeBob)) scale(var(--scaleBob)); }
  20% { transform: translate(calc(var(--tranX) + -3px), calc(var(--tranY) + 0px)) rotate(var(--degreeBob)) scale(var(--scaleBob)); }
  30% { transform: translate(calc(var(--tranX) + 3px), calc(var(--tranY) + 2px)) rotate(var(--degreeBob)) scale(var(--scaleBob)); }
  40% { transform: translate(calc(var(--tranX) + 1px), calc(var(--tranY) + -1px)) rotate(var(--degreeBob)) scale(var(--scaleBob)); }
  50% { transform: translate(calc(var(--tranX) + -1px), calc(var(--tranY) + 2px)) rotate(var(--degreeBob)) scale(var(--scaleBob)); }
  60% { transform: translate(calc(var(--tranX) + -3px), calc(var(--tranY) + 1px)) rotate(var(--degreeBob)) scale(var(--scaleBob)); }
  70% { transform: translate(calc(var(--tranX) + 3px), calc(var(--tranY) + 1px)) rotate(var(--degreeBob)) scale(var(--scaleBob)); }
  80% { transform: translate(calc(var(--tranX) + -1px), calc(var(--tranY) + -1px)) rotate(var(--degreeBob)) scale(var(--scaleBob)); }
  90% { transform: translate(calc(var(--tranX) + 1px), calc(var(--tranY) + 2px)) rotate(var(--degreeBob)) scale(var(--scaleBob)); }
  100% { transform: translate(calc(var(--tranX) + 1px), calc(var(--tranY) + -2px)) rotate(var(--degreeBob)) scale(var(--scaleBob)); }
}

#about {
  text-align: center;
  margin-bottom: 2rem;
}

#about p {
  margin-bottom: 0.25rem;
}

#support {
  display: flex;
  flex-direction: column;
  align-items: center;
  margin-bottom: 4rem;
}

#support h3{
  margin-bottom: 1rem;
}

.bmc-btn:hover,
.bmc-btn-text:hover{
  color: red;
}

/*---------- PATHETIC ----------*/

$particles: 21; // has to match nodes in dom
$particleSize: 30;
$radius: 160;
$lapDuration: 10s;

@mixin perspective($val) {
  -webkit-perspective: $val; 
  -moz-perspective: $val; 
  -ms-perspective: $val; 
  perspective: $val;
}

@mixin transform($val) {
  -webkit-transform: $val;
  -moz-transform: $val;
  -ms-transform: $val;
  transform: $val;
}

.bob-link div.wrapper {
  display: none;
}

.bob-link:hover div.wrapper {
  display: block;
  position: absolute;
  // width: 100px;
  // height: 100px;
  top: -20%;
  left: 47%;
  z-index: 2;
  transform: translate(-50%, -50%);
  @include perspective(500px);
}

.bob-link img.pathetic {
  display: none;
}

.bob-link:hover img.pathetic {
  display: block;
  position: absolute;
  width: #{$particleSize}px;
  height: #{$particleSize}px;
  border-radius: #{$particleSize}px;
  opacity: 0;
  /*background: rgba(255,255,255,0.5);*/
  box-shadow: 0px 0px 10px rgba(255,255,255,1);
  animation-name: spin;
  animation-duration: $lapDuration;
  animation-iteration-count: infinite;
  animation-timing-function: ease-in-out;
}

@for $i from 1 through $particles {
  img.pathetic:nth-child(#{$i}) {
    $angle: ( calc($i / $particles) ) * 720;
    
    @include transform(
      rotate( #{$angle}deg )
      translate3d( #{$radius}px , 0, 0 )
    );

    animation-delay: $i * ( calc($lapDuration / $particles));
  }
}

@keyframes spin {
  from {
    opacity: 0.7;
  }
  to {
    opacity: 1;
    transform: translate3d(calc(-#{$particleSize}px / 2), calc(-#{$particleSize}px / 2), 570px);
  }
}

/*---------- END PATHETIC ----------*/



@media(max-width: 950px){
  body {
    margin: 1rem;
  }
  .commit-container {
    overflow-x: scroll;
  }
  .box{
    width: 25px;
    height: 25px;
    border: 1px solid gray;
    margin: 2px;
  }

  #settings {
    flex-direction: column;
    align-items: center;
  }

  #instructions {
    max-width: 100%;
  }

  .instructions-body img.bob{
    display: none;
  }

}